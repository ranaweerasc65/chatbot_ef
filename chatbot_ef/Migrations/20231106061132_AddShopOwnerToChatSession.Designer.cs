// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using chatbot_ef.Data;

#nullable disable

namespace chatbot_ef.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231106061132_AddShopOwnerToChatSession")]
    partial class AddShopOwnerToChatSession
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("chatbot_ef.Models.Appoinment", b =>
                {
                    b.Property<int>("Appointment_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Customer_ID")
                        .HasColumnType("int");

                    b.Property<int>("Shop_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Appointment_ID");

                    b.HasIndex("Customer_ID");

                    b.HasIndex("Shop_Id");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("chatbot_ef.Models.Category", b =>
                {
                    b.Property<int>("Category_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Category_ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("chatbot_ef.Models.ChatMessage", b =>
                {
                    b.Property<int>("Message_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Platform_ID")
                        .HasColumnType("int");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Session_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Message_ID");

                    b.HasIndex("Platform_ID");

                    b.HasIndex("Session_ID");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("chatbot_ef.Models.ChatSession", b =>
                {
                    b.Property<int>("Session_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Session_ID");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("chatbot_ef.Models.ChatSessionShop", b =>
                {
                    b.Property<int>("ChatSessionId")
                        .HasColumnType("int");

                    b.Property<int>("Shop_Id")
                        .HasColumnType("int");

                    b.Property<int>("ChatSessionShopId")
                        .HasColumnType("int");

                    b.HasKey("ChatSessionId", "Shop_Id");

                    b.HasIndex("Shop_Id");

                    b.ToTable("ChatSessionShop");
                });

            modelBuilder.Entity("chatbot_ef.Models.Customer", b =>
                {
                    b.Property<int>("Customer_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContactNumber")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Customer_ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("chatbot_ef.Models.CustomerPlatform", b =>
                {
                    b.Property<int>("CustomerPlatform_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Customer_ID")
                        .HasColumnType("int");

                    b.Property<int>("Platform_ID")
                        .HasColumnType("int");

                    b.HasKey("CustomerPlatform_ID");

                    b.HasIndex("Customer_ID");

                    b.HasIndex("Platform_ID");

                    b.ToTable("CustomerPlatform");
                });

            modelBuilder.Entity("chatbot_ef.Models.Platform", b =>
                {
                    b.Property<int>("Platform_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Platform_ID");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("chatbot_ef.Models.Product", b =>
                {
                    b.Property<int>("Product_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Category_ID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Product_ID");

                    b.HasIndex("Category_ID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("chatbot_ef.Models.Shop", b =>
                {
                    b.Property<int>("Shop_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ShopOwner_ID")
                        .HasColumnType("int");

                    b.HasKey("Shop_Id");

                    b.HasIndex("ShopOwner_ID");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("chatbot_ef.Models.ShopOwner", b =>
                {
                    b.Property<int>("ShopOwner_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChatSessionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ShopOwner_ID");

                    b.HasIndex("ChatSessionId");

                    b.ToTable("ShopOwners");
                });

            modelBuilder.Entity("chatbot_ef.Models.ShopPlatform", b =>
                {
                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("ShopId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("ShopPlatform");
                });

            modelBuilder.Entity("chatbot_ef.Models.ShopProduct", b =>
                {
                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ShopId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShopProduct");
                });

            modelBuilder.Entity("chatbot_ef.Models.Appoinment", b =>
                {
                    b.HasOne("chatbot_ef.Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("Customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatbot_ef.Models.Shop", "Shop")
                        .WithMany("Appointments")
                        .HasForeignKey("Shop_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_Shop");

                    b.Navigation("Customer");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("chatbot_ef.Models.ChatMessage", b =>
                {
                    b.HasOne("chatbot_ef.Models.Platform", "Platform")
                        .WithMany("ChatMessages")
                        .HasForeignKey("Platform_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChatMessage_Platform");

                    b.HasOne("chatbot_ef.Models.ChatSession", "ChatSession")
                        .WithMany("ChatMessages")
                        .HasForeignKey("Session_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChatMessage_ChatSession");

                    b.Navigation("ChatSession");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("chatbot_ef.Models.ChatSessionShop", b =>
                {
                    b.HasOne("chatbot_ef.Models.ChatSession", "ChatSession")
                        .WithMany("ChatSessionShops")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatbot_ef.Models.Shop", "Shop")
                        .WithMany("ChatSessionShops")
                        .HasForeignKey("Shop_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatSession");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("chatbot_ef.Models.CustomerPlatform", b =>
                {
                    b.HasOne("chatbot_ef.Models.Customer", "Customer")
                        .WithMany("CustomerPlatforms")
                        .HasForeignKey("Customer_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatbot_ef.Models.Platform", "Platform")
                        .WithMany("CustomerPlatforms")
                        .HasForeignKey("Platform_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("chatbot_ef.Models.Product", b =>
                {
                    b.HasOne("chatbot_ef.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("Category_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("chatbot_ef.Models.Shop", b =>
                {
                    b.HasOne("chatbot_ef.Models.ShopOwner", "ShopOwner")
                        .WithMany("Shops")
                        .HasForeignKey("ShopOwner_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shop_ShopOwner");

                    b.Navigation("ShopOwner");
                });

            modelBuilder.Entity("chatbot_ef.Models.ShopOwner", b =>
                {
                    b.HasOne("chatbot_ef.Models.ChatSession", "ChatSession")
                        .WithMany("ShopOwners")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChatSession");
                });

            modelBuilder.Entity("chatbot_ef.Models.ShopPlatform", b =>
                {
                    b.HasOne("chatbot_ef.Models.Platform", "Platform")
                        .WithMany("ShopPlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatbot_ef.Models.Shop", "Shop")
                        .WithMany("ShopPlatforms")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("chatbot_ef.Models.ShopProduct", b =>
                {
                    b.HasOne("chatbot_ef.Models.Product", "Product")
                        .WithMany("ShopProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatbot_ef.Models.Shop", "Shop")
                        .WithMany("ShopProducts")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("chatbot_ef.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("chatbot_ef.Models.ChatSession", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("ChatSessionShops");

                    b.Navigation("ShopOwners");
                });

            modelBuilder.Entity("chatbot_ef.Models.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CustomerPlatforms");
                });

            modelBuilder.Entity("chatbot_ef.Models.Platform", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("CustomerPlatforms");

                    b.Navigation("ShopPlatforms");
                });

            modelBuilder.Entity("chatbot_ef.Models.Product", b =>
                {
                    b.Navigation("ShopProducts");
                });

            modelBuilder.Entity("chatbot_ef.Models.Shop", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ChatSessionShops");

                    b.Navigation("ShopPlatforms");

                    b.Navigation("ShopProducts");
                });

            modelBuilder.Entity("chatbot_ef.Models.ShopOwner", b =>
                {
                    b.Navigation("Shops");
                });
#pragma warning restore 612, 618
        }
    }
}
